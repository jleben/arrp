// Generated by Bisonc++ V4.05.00 on Fri, 06 Nov 2015 16:13:31 -0800

// $insert class.ih
#include "parser_impl.hpp"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them

// $insert debugincludes
#include <iostream>
#include <sstream>
#include <string>
#include <unordered_map>
#include <iomanip>

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {279, 2}, // 1: program ->  stmt_list optional_semicolon
     {279, 0}, // 2: program ->  <empty>
     {280, 1}, // 3: stmt_list ->  stmt
     {280, 3}, // 4: stmt_list (';') ->  stmt_list ';' stmt
     {282, 6}, // 5: stmt ('(') ->  id '(' param_list ')' '=' expr_block
     {282, 3}, // 6: stmt ('=') ->  id '=' expr_block
     {284, 0}, // 7: param_list ->  <empty>
     {284, 1}, // 8: param_list ->  id
     {284, 3}, // 9: param_list (',') ->  param_list ',' id
     {285, 1}, // 10: expr_block ->  expr
     {285, 4}, // 11: expr_block ('{') ->  '{' expr optional_semicolon '}'
     {285, 6}, // 12: expr_block ('{') ->  '{' let_block_list ';' expr optional_semicolon '}'
     {287, 1}, // 13: let_block_list ->  let_block
     {287, 3}, // 14: let_block_list (';') ->  let_block_list ';' let_block
     {288, 2}, // 15: let_block ->  let stmt
     {288, 5}, // 16: let_block ('{') ->  let '{' stmt_list optional_semicolon '}'
     {289, 1}, // 17: let (LET) ->  LET
     {286, 1}, // 18: expr ->  array_func
     {286, 1}, // 19: expr ->  array_apply
     {286, 2}, // 20: expr (LOGIC_NOT) ->  LOGIC_NOT expr
     {286, 3}, // 21: expr (LOGIC_OR) ->  expr LOGIC_OR expr
     {286, 3}, // 22: expr (LOGIC_AND) ->  expr LOGIC_AND expr
     {286, 3}, // 23: expr (EQ) ->  expr EQ expr
     {286, 3}, // 24: expr (NEQ) ->  expr NEQ expr
     {286, 3}, // 25: expr (LESS) ->  expr LESS expr
     {286, 3}, // 26: expr (LESS_EQ) ->  expr LESS_EQ expr
     {286, 3}, // 27: expr (MORE) ->  expr MORE expr
     {286, 3}, // 28: expr (MORE_EQ) ->  expr MORE_EQ expr
     {286, 3}, // 29: expr ('+') ->  expr '+' expr
     {286, 3}, // 30: expr ('-') ->  expr '-' expr
     {286, 2}, // 31: expr (UMINUS) ->  '-' expr
     {286, 3}, // 32: expr ('*') ->  expr '*' expr
     {286, 3}, // 33: expr ('/') ->  expr '/' expr
     {286, 3}, // 34: expr (':') ->  expr ':' expr
     {286, 3}, // 35: expr ('%') ->  expr '%' expr
     {286, 3}, // 36: expr ('^') ->  expr '^' expr
     {286, 3}, // 37: expr ('(') ->  '(' expr ')'
     {286, 1}, // 38: expr ->  call
     {286, 1}, // 39: expr ->  hash
     {286, 1}, // 40: expr ->  if_expr
     {286, 1}, // 41: expr ->  id
     {286, 1}, // 42: expr ->  number
     {286, 1}, // 43: expr ->  boolean
     {293, 2}, // 44: hash ('#') ->  '#' expr
     {293, 4}, // 45: hash ('#') ->  '#' '(' expr ')'
     {293, 6}, // 46: hash ('#') ->  '#' '(' expr ',' expr ')'
     {291, 4}, // 47: array_apply ('[') ->  expr '[' expr_list ']'
     {290, 4}, // 48: array_func (RIGHT_ARROW) ->  '\' array_arg_list RIGHT_ARROW expr
     {298, 1}, // 49: array_arg_list ->  array_arg
     {298, 3}, // 50: array_arg_list (',') ->  array_arg_list ',' array_arg
     {299, 1}, // 51: array_arg ->  id
     {299, 3}, // 52: array_arg ('=') ->  id '=' expr
     {295, 1}, // 53: number ->  int
     {295, 1}, // 54: number ->  real
     {292, 4}, // 55: call ('(') ->  expr '(' expr_list ')'
     {302, 1}, // 56: int_list ->  int
     {302, 3}, // 57: int_list (',') ->  int_list ',' int
     {297, 1}, // 58: expr_list ->  expr
     {297, 3}, // 59: expr_list (',') ->  expr_list ',' expr
     {294, 6}, // 60: if_expr (IF) ->  IF expr THEN expr ELSE expr
     {300, 1}, // 61: int (INT) ->  INT
     {301, 1}, // 62: real (REAL) ->  REAL
     {296, 1}, // 63: boolean (TRUE) ->  TRUE
     {296, 1}, // 64: boolean (FALSE) ->  FALSE
     {283, 1}, // 65: id (ID) ->  ID
     {281, 1}, // 66: optional_semicolon (';') ->  ';'
     {281, 0}, // 67: optional_semicolon ->  <empty>
     {303, 1}, // 68: program_$ ->  program
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_DEF}, {  6} },             
    { {     279}, {  1} }, // program  
    { {     280}, {  2} }, // stmt_list
    { {     282}, {  3} }, // stmt     
    { {     283}, {  4} }, // id       
    { {     260}, {  5} }, // ID       
    { {       0}, { -2} },             
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { REQ_DEF}, {   3} },                      
    { {     281}, {   6} }, // optional_semicolon
    { {      59}, {   7} }, // ';'               
    { {       0}, { -67} },                      
};

SR__ s_3[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_4[] =
{
    { { REQ_TOKEN}, { 3} },       
    { {        40}, { 8} }, // '('
    { {        61}, { 9} }, // '='
    { {         0}, { 0} },       
};

SR__ s_5[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -65} }, 
};

SR__ s_6[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_7[] =
{
    { { REQ_DEF}, {   4} },        
    { {     282}, {  10} }, // stmt
    { {     283}, {   4} }, // id  
    { {     260}, {   5} }, // ID  
    { {       0}, { -66} },        
};

SR__ s_8[] =
{
    { { REQ_DEF}, {  4} },              
    { {     284}, { 11} }, // param_list
    { {     283}, { 12} }, // id        
    { {     260}, {  5} }, // ID        
    { {       0}, { -7} },              
};

SR__ s_9[] =
{
    { { REQ_TOKEN}, { 25} },               
    { {       285}, { 13} }, // expr_block 
    { {       286}, { 14} }, // expr       
    { {       123}, { 15} }, // '{'        
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_10[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_11[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        41}, { 36} }, // ')'
    { {        44}, { 37} }, // ','
    { {         0}, {  0} },       
};

SR__ s_12[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_13[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_14[] =
{
    { { REQ_DEF}, {  18} },             
    { {     268}, {  38} }, // LOGIC_OR 
    { {     269}, {  39} }, // LOGIC_AND
    { {     270}, {  40} }, // EQ       
    { {     271}, {  41} }, // NEQ      
    { {     272}, {  42} }, // LESS     
    { {     274}, {  43} }, // LESS_EQ  
    { {     273}, {  44} }, // MORE     
    { {     275}, {  45} }, // MORE_EQ  
    { {      43}, {  46} }, // '+'      
    { {      45}, {  47} }, // '-'      
    { {      42}, {  48} }, // '*'      
    { {      47}, {  49} }, // '/'      
    { {      58}, {  50} }, // ':'      
    { {      37}, {  51} }, // '%'      
    { {      94}, {  52} }, // '^'      
    { {      91}, {  53} }, // '['      
    { {      40}, {  54} }, // '('      
    { {       0}, { -10} },             
};

SR__ s_15[] =
{
    { { REQ_TOKEN}, { 27} },                  
    { {       286}, { 55} }, // expr          
    { {       287}, { 56} }, // let_block_list
    { {       290}, { 16} }, // array_func    
    { {       291}, { 17} }, // array_apply   
    { {       277}, { 18} }, // LOGIC_NOT     
    { {        45}, { 19} }, // '-'           
    { {        40}, { 20} }, // '('           
    { {       292}, { 21} }, // call          
    { {       293}, { 22} }, // hash          
    { {       294}, { 23} }, // if_expr       
    { {       283}, { 24} }, // id            
    { {       295}, { 25} }, // number        
    { {       296}, { 26} }, // boolean       
    { {       288}, { 57} }, // let_block     
    { {        92}, { 27} }, // '\'           
    { {        35}, { 28} }, // '#'           
    { {       263}, { 29} }, // IF            
    { {       260}, {  5} }, // ID            
    { {       300}, { 30} }, // int           
    { {       301}, { 31} }, // real          
    { {       261}, { 32} }, // TRUE          
    { {       262}, { 33} }, // FALSE         
    { {       289}, { 58} }, // let           
    { {       258}, { 34} }, // INT           
    { {       259}, { 35} }, // REAL          
    { {       266}, { 59} }, // LET           
    { {         0}, {  0} },                  
};

SR__ s_16[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_17[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_18[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 60} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_19[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 61} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_20[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 62} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_21[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_22[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR__ s_23[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ s_24[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_25[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_26[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ s_27[] =
{
    { { REQ_TOKEN}, {  5} },                  
    { {       298}, { 63} }, // array_arg_list
    { {       299}, { 64} }, // array_arg     
    { {       283}, { 65} }, // id            
    { {       260}, {  5} }, // ID            
    { {         0}, {  0} },                  
};

SR__ s_28[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 66} }, // expr       
    { {        40}, { 67} }, // '('        
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_29[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 68} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_30[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_31[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_32[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR__ s_33[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -64} }, 
};

SR__ s_34[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR__ s_35[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_36[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        61}, { 69} }, // '='
    { {         0}, {  0} },       
};

SR__ s_37[] =
{
    { { REQ_TOKEN}, {  3} },      
    { {       283}, { 70} }, // id
    { {       260}, {  5} }, // ID
    { {         0}, {  0} },      
};

SR__ s_38[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 71} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_39[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 72} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_40[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 73} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_41[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 74} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_42[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 75} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_43[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 76} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_44[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 77} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_45[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 78} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_46[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 79} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_47[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 80} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_48[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 81} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_49[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 82} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_50[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 83} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_51[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 84} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_52[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 85} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_53[] =
{
    { { REQ_TOKEN}, { 24} },               
    { {       297}, { 86} }, // expr_list  
    { {       286}, { 87} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_54[] =
{
    { { REQ_TOKEN}, { 24} },               
    { {       297}, { 88} }, // expr_list  
    { {       286}, { 87} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_55[] =
{
    { { REQ_DEF}, {  20} },                      
    { {     281}, {  89} }, // optional_semicolon
    { {     268}, {  38} }, // LOGIC_OR          
    { {     269}, {  39} }, // LOGIC_AND         
    { {     270}, {  40} }, // EQ                
    { {     271}, {  41} }, // NEQ               
    { {     272}, {  42} }, // LESS              
    { {     274}, {  43} }, // LESS_EQ           
    { {     273}, {  44} }, // MORE              
    { {     275}, {  45} }, // MORE_EQ           
    { {      43}, {  46} }, // '+'               
    { {      45}, {  47} }, // '-'               
    { {      42}, {  48} }, // '*'               
    { {      47}, {  49} }, // '/'               
    { {      58}, {  50} }, // ':'               
    { {      37}, {  51} }, // '%'               
    { {      94}, {  52} }, // '^'               
    { {      91}, {  53} }, // '['               
    { {      40}, {  54} }, // '('               
    { {      59}, {  90} }, // ';'               
    { {       0}, { -67} },                      
};

SR__ s_56[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 91} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_57[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_58[] =
{
    { { REQ_TOKEN}, {  5} },        
    { {       282}, { 92} }, // stmt
    { {       123}, { 93} }, // '{' 
    { {       283}, {  4} }, // id  
    { {       260}, {  5} }, // ID  
    { {         0}, {  0} },        
};

SR__ s_59[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_60[] =
{
    { { REQ_DEF}, {   3} },       
    { {      91}, {  53} }, // '['
    { {      40}, {  54} }, // '('
    { {       0}, { -20} },       
};

SR__ s_61[] =
{
    { { REQ_DEF}, {   3} },       
    { {      91}, {  53} }, // '['
    { {      40}, {  54} }, // '('
    { {       0}, { -31} },       
};

SR__ s_62[] =
{
    { { REQ_TOKEN}, { 19} },             
    { {        41}, { 94} }, // ')'      
    { {       268}, { 38} }, // LOGIC_OR 
    { {       269}, { 39} }, // LOGIC_AND
    { {       270}, { 40} }, // EQ       
    { {       271}, { 41} }, // NEQ      
    { {       272}, { 42} }, // LESS     
    { {       274}, { 43} }, // LESS_EQ  
    { {       273}, { 44} }, // MORE     
    { {       275}, { 45} }, // MORE_EQ  
    { {        43}, { 46} }, // '+'      
    { {        45}, { 47} }, // '-'      
    { {        42}, { 48} }, // '*'      
    { {        47}, { 49} }, // '/'      
    { {        58}, { 50} }, // ':'      
    { {        37}, { 51} }, // '%'      
    { {        94}, { 52} }, // '^'      
    { {        91}, { 53} }, // '['      
    { {        40}, { 54} }, // '('      
    { {         0}, {  0} },             
};

SR__ s_63[] =
{
    { { REQ_TOKEN}, {  3} },               
    { {       267}, { 95} }, // RIGHT_ARROW
    { {        44}, { 96} }, // ','        
    { {         0}, {  0} },               
};

SR__ s_64[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR__ s_65[] =
{
    { { REQ_DEF}, {   2} },       
    { {      61}, {  97} }, // '='
    { {       0}, { -51} },       
};

SR__ s_66[] =
{
    { { REQ_DEF}, {   3} },       
    { {      91}, {  53} }, // '['
    { {      40}, {  54} }, // '('
    { {       0}, { -44} },       
};

SR__ s_67[] =
{
    { { REQ_TOKEN}, { 23} },               
    { {       286}, { 98} }, // expr       
    { {       290}, { 16} }, // array_func 
    { {       291}, { 17} }, // array_apply
    { {       277}, { 18} }, // LOGIC_NOT  
    { {        45}, { 19} }, // '-'        
    { {        40}, { 20} }, // '('        
    { {       292}, { 21} }, // call       
    { {       293}, { 22} }, // hash       
    { {       294}, { 23} }, // if_expr    
    { {       283}, { 24} }, // id         
    { {       295}, { 25} }, // number     
    { {       296}, { 26} }, // boolean    
    { {        92}, { 27} }, // '\'        
    { {        35}, { 28} }, // '#'        
    { {       263}, { 29} }, // IF         
    { {       260}, {  5} }, // ID         
    { {       300}, { 30} }, // int        
    { {       301}, { 31} }, // real       
    { {       261}, { 32} }, // TRUE       
    { {       262}, { 33} }, // FALSE      
    { {       258}, { 34} }, // INT        
    { {       259}, { 35} }, // REAL       
    { {         0}, {  0} },               
};

SR__ s_68[] =
{
    { { REQ_TOKEN}, { 19} },             
    { {       264}, { 99} }, // THEN     
    { {       268}, { 38} }, // LOGIC_OR 
    { {       269}, { 39} }, // LOGIC_AND
    { {       270}, { 40} }, // EQ       
    { {       271}, { 41} }, // NEQ      
    { {       272}, { 42} }, // LESS     
    { {       274}, { 43} }, // LESS_EQ  
    { {       273}, { 44} }, // MORE     
    { {       275}, { 45} }, // MORE_EQ  
    { {        43}, { 46} }, // '+'      
    { {        45}, { 47} }, // '-'      
    { {        42}, { 48} }, // '*'      
    { {        47}, { 49} }, // '/'      
    { {        58}, { 50} }, // ':'      
    { {        37}, { 51} }, // '%'      
    { {        94}, { 52} }, // '^'      
    { {        91}, { 53} }, // '['      
    { {        40}, { 54} }, // '('      
    { {         0}, {  0} },             
};

SR__ s_69[] =
{
    { { REQ_TOKEN}, {  25} },               
    { {       285}, { 100} }, // expr_block 
    { {       286}, {  14} }, // expr       
    { {       123}, {  15} }, // '{'        
    { {       290}, {  16} }, // array_func 
    { {       291}, {  17} }, // array_apply
    { {       277}, {  18} }, // LOGIC_NOT  
    { {        45}, {  19} }, // '-'        
    { {        40}, {  20} }, // '('        
    { {       292}, {  21} }, // call       
    { {       293}, {  22} }, // hash       
    { {       294}, {  23} }, // if_expr    
    { {       283}, {  24} }, // id         
    { {       295}, {  25} }, // number     
    { {       296}, {  26} }, // boolean    
    { {        92}, {  27} }, // '\'        
    { {        35}, {  28} }, // '#'        
    { {       263}, {  29} }, // IF         
    { {       260}, {   5} }, // ID         
    { {       300}, {  30} }, // int        
    { {       301}, {  31} }, // real       
    { {       261}, {  32} }, // TRUE       
    { {       262}, {  33} }, // FALSE      
    { {       258}, {  34} }, // INT        
    { {       259}, {  35} }, // REAL       
    { {         0}, {   0} },               
};

SR__ s_70[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_71[] =
{
    { { REQ_DEF}, {  17} },             
    { {     269}, {  39} }, // LOGIC_AND
    { {     270}, {  40} }, // EQ       
    { {     271}, {  41} }, // NEQ      
    { {     272}, {  42} }, // LESS     
    { {     274}, {  43} }, // LESS_EQ  
    { {     273}, {  44} }, // MORE     
    { {     275}, {  45} }, // MORE_EQ  
    { {      43}, {  46} }, // '+'      
    { {      45}, {  47} }, // '-'      
    { {      42}, {  48} }, // '*'      
    { {      47}, {  49} }, // '/'      
    { {      58}, {  50} }, // ':'      
    { {      37}, {  51} }, // '%'      
    { {      94}, {  52} }, // '^'      
    { {      91}, {  53} }, // '['      
    { {      40}, {  54} }, // '('      
    { {       0}, { -21} },             
};

SR__ s_72[] =
{
    { { REQ_DEF}, {  16} },           
    { {     270}, {  40} }, // EQ     
    { {     271}, {  41} }, // NEQ    
    { {     272}, {  42} }, // LESS   
    { {     274}, {  43} }, // LESS_EQ
    { {     273}, {  44} }, // MORE   
    { {     275}, {  45} }, // MORE_EQ
    { {      43}, {  46} }, // '+'    
    { {      45}, {  47} }, // '-'    
    { {      42}, {  48} }, // '*'    
    { {      47}, {  49} }, // '/'    
    { {      58}, {  50} }, // ':'    
    { {      37}, {  51} }, // '%'    
    { {      94}, {  52} }, // '^'    
    { {      91}, {  53} }, // '['    
    { {      40}, {  54} }, // '('    
    { {       0}, { -22} },           
};

SR__ s_73[] =
{
    { { REQ_DEF}, {  10} },       
    { {      43}, {  46} }, // '+'
    { {      45}, {  47} }, // '-'
    { {      42}, {  48} }, // '*'
    { {      47}, {  49} }, // '/'
    { {      58}, {  50} }, // ':'
    { {      37}, {  51} }, // '%'
    { {      94}, {  52} }, // '^'
    { {      91}, {  53} }, // '['
    { {      40}, {  54} }, // '('
    { {       0}, { -23} },       
};

SR__ s_74[] =
{
    { { REQ_DEF}, {  10} },       
    { {      43}, {  46} }, // '+'
    { {      45}, {  47} }, // '-'
    { {      42}, {  48} }, // '*'
    { {      47}, {  49} }, // '/'
    { {      58}, {  50} }, // ':'
    { {      37}, {  51} }, // '%'
    { {      94}, {  52} }, // '^'
    { {      91}, {  53} }, // '['
    { {      40}, {  54} }, // '('
    { {       0}, { -24} },       
};

SR__ s_75[] =
{
    { { REQ_DEF}, {  10} },       
    { {      43}, {  46} }, // '+'
    { {      45}, {  47} }, // '-'
    { {      42}, {  48} }, // '*'
    { {      47}, {  49} }, // '/'
    { {      58}, {  50} }, // ':'
    { {      37}, {  51} }, // '%'
    { {      94}, {  52} }, // '^'
    { {      91}, {  53} }, // '['
    { {      40}, {  54} }, // '('
    { {       0}, { -25} },       
};

SR__ s_76[] =
{
    { { REQ_DEF}, {  10} },       
    { {      43}, {  46} }, // '+'
    { {      45}, {  47} }, // '-'
    { {      42}, {  48} }, // '*'
    { {      47}, {  49} }, // '/'
    { {      58}, {  50} }, // ':'
    { {      37}, {  51} }, // '%'
    { {      94}, {  52} }, // '^'
    { {      91}, {  53} }, // '['
    { {      40}, {  54} }, // '('
    { {       0}, { -26} },       
};

SR__ s_77[] =
{
    { { REQ_DEF}, {  10} },       
    { {      43}, {  46} }, // '+'
    { {      45}, {  47} }, // '-'
    { {      42}, {  48} }, // '*'
    { {      47}, {  49} }, // '/'
    { {      58}, {  50} }, // ':'
    { {      37}, {  51} }, // '%'
    { {      94}, {  52} }, // '^'
    { {      91}, {  53} }, // '['
    { {      40}, {  54} }, // '('
    { {       0}, { -27} },       
};

SR__ s_78[] =
{
    { { REQ_DEF}, {  10} },       
    { {      43}, {  46} }, // '+'
    { {      45}, {  47} }, // '-'
    { {      42}, {  48} }, // '*'
    { {      47}, {  49} }, // '/'
    { {      58}, {  50} }, // ':'
    { {      37}, {  51} }, // '%'
    { {      94}, {  52} }, // '^'
    { {      91}, {  53} }, // '['
    { {      40}, {  54} }, // '('
    { {       0}, { -28} },       
};

SR__ s_79[] =
{
    { { REQ_DEF}, {   8} },       
    { {      42}, {  48} }, // '*'
    { {      47}, {  49} }, // '/'
    { {      58}, {  50} }, // ':'
    { {      37}, {  51} }, // '%'
    { {      94}, {  52} }, // '^'
    { {      91}, {  53} }, // '['
    { {      40}, {  54} }, // '('
    { {       0}, { -29} },       
};

SR__ s_80[] =
{
    { { REQ_DEF}, {   8} },       
    { {      42}, {  48} }, // '*'
    { {      47}, {  49} }, // '/'
    { {      58}, {  50} }, // ':'
    { {      37}, {  51} }, // '%'
    { {      94}, {  52} }, // '^'
    { {      91}, {  53} }, // '['
    { {      40}, {  54} }, // '('
    { {       0}, { -30} },       
};

SR__ s_81[] =
{
    { { REQ_DEF}, {   4} },       
    { {      94}, {  52} }, // '^'
    { {      91}, {  53} }, // '['
    { {      40}, {  54} }, // '('
    { {       0}, { -32} },       
};

SR__ s_82[] =
{
    { { REQ_DEF}, {   4} },       
    { {      94}, {  52} }, // '^'
    { {      91}, {  53} }, // '['
    { {      40}, {  54} }, // '('
    { {       0}, { -33} },       
};

SR__ s_83[] =
{
    { { REQ_DEF}, {   4} },       
    { {      94}, {  52} }, // '^'
    { {      91}, {  53} }, // '['
    { {      40}, {  54} }, // '('
    { {       0}, { -34} },       
};

SR__ s_84[] =
{
    { { REQ_DEF}, {   4} },       
    { {      94}, {  52} }, // '^'
    { {      91}, {  53} }, // '['
    { {      40}, {  54} }, // '('
    { {       0}, { -35} },       
};

SR__ s_85[] =
{
    { { REQ_DEF}, {   3} },       
    { {      91}, {  53} }, // '['
    { {      40}, {  54} }, // '('
    { {       0}, { -36} },       
};

SR__ s_86[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        93}, { 101} }, // ']'
    { {        44}, { 102} }, // ','
    { {         0}, {   0} },       
};

SR__ s_87[] =
{
    { { REQ_DEF}, {  18} },             
    { {     268}, {  38} }, // LOGIC_OR 
    { {     269}, {  39} }, // LOGIC_AND
    { {     270}, {  40} }, // EQ       
    { {     271}, {  41} }, // NEQ      
    { {     272}, {  42} }, // LESS     
    { {     274}, {  43} }, // LESS_EQ  
    { {     273}, {  44} }, // MORE     
    { {     275}, {  45} }, // MORE_EQ  
    { {      43}, {  46} }, // '+'      
    { {      45}, {  47} }, // '-'      
    { {      42}, {  48} }, // '*'      
    { {      47}, {  49} }, // '/'      
    { {      58}, {  50} }, // ':'      
    { {      37}, {  51} }, // '%'      
    { {      94}, {  52} }, // '^'      
    { {      91}, {  53} }, // '['      
    { {      40}, {  54} }, // '('      
    { {       0}, { -58} },             
};

SR__ s_88[] =
{
    { { REQ_TOKEN}, {   3} },       
    { {        41}, { 103} }, // ')'
    { {        44}, { 102} }, // ','
    { {         0}, {   0} },       
};

SR__ s_89[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       125}, { 104} }, // '}'
    { {         0}, {   0} },       
};

SR__ s_90[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -66} }, 
};

SR__ s_91[] =
{
    { { REQ_TOKEN}, {  26} },               
    { {       286}, { 105} }, // expr       
    { {       288}, { 106} }, // let_block  
    { {       290}, {  16} }, // array_func 
    { {       291}, {  17} }, // array_apply
    { {       277}, {  18} }, // LOGIC_NOT  
    { {        45}, {  19} }, // '-'        
    { {        40}, {  20} }, // '('        
    { {       292}, {  21} }, // call       
    { {       293}, {  22} }, // hash       
    { {       294}, {  23} }, // if_expr    
    { {       283}, {  24} }, // id         
    { {       295}, {  25} }, // number     
    { {       296}, {  26} }, // boolean    
    { {       289}, {  58} }, // let        
    { {        92}, {  27} }, // '\'        
    { {        35}, {  28} }, // '#'        
    { {       263}, {  29} }, // IF         
    { {       260}, {   5} }, // ID         
    { {       300}, {  30} }, // int        
    { {       301}, {  31} }, // real       
    { {       261}, {  32} }, // TRUE       
    { {       262}, {  33} }, // FALSE      
    { {       266}, {  59} }, // LET        
    { {       258}, {  34} }, // INT        
    { {       259}, {  35} }, // REAL       
    { {         0}, {   0} },               
};

SR__ s_92[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_93[] =
{
    { { REQ_TOKEN}, {   5} },             
    { {       280}, { 107} }, // stmt_list
    { {       282}, {   3} }, // stmt     
    { {       283}, {   4} }, // id       
    { {       260}, {   5} }, // ID       
    { {         0}, {   0} },             
};

SR__ s_94[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_95[] =
{
    { { REQ_TOKEN}, {  23} },               
    { {       286}, { 108} }, // expr       
    { {       290}, {  16} }, // array_func 
    { {       291}, {  17} }, // array_apply
    { {       277}, {  18} }, // LOGIC_NOT  
    { {        45}, {  19} }, // '-'        
    { {        40}, {  20} }, // '('        
    { {       292}, {  21} }, // call       
    { {       293}, {  22} }, // hash       
    { {       294}, {  23} }, // if_expr    
    { {       283}, {  24} }, // id         
    { {       295}, {  25} }, // number     
    { {       296}, {  26} }, // boolean    
    { {        92}, {  27} }, // '\'        
    { {        35}, {  28} }, // '#'        
    { {       263}, {  29} }, // IF         
    { {       260}, {   5} }, // ID         
    { {       300}, {  30} }, // int        
    { {       301}, {  31} }, // real       
    { {       261}, {  32} }, // TRUE       
    { {       262}, {  33} }, // FALSE      
    { {       258}, {  34} }, // INT        
    { {       259}, {  35} }, // REAL       
    { {         0}, {   0} },               
};

SR__ s_96[] =
{
    { { REQ_TOKEN}, {   4} },             
    { {       299}, { 109} }, // array_arg
    { {       283}, {  65} }, // id       
    { {       260}, {   5} }, // ID       
    { {         0}, {   0} },             
};

SR__ s_97[] =
{
    { { REQ_TOKEN}, {  23} },               
    { {       286}, { 110} }, // expr       
    { {       290}, {  16} }, // array_func 
    { {       291}, {  17} }, // array_apply
    { {       277}, {  18} }, // LOGIC_NOT  
    { {        45}, {  19} }, // '-'        
    { {        40}, {  20} }, // '('        
    { {       292}, {  21} }, // call       
    { {       293}, {  22} }, // hash       
    { {       294}, {  23} }, // if_expr    
    { {       283}, {  24} }, // id         
    { {       295}, {  25} }, // number     
    { {       296}, {  26} }, // boolean    
    { {        92}, {  27} }, // '\'        
    { {        35}, {  28} }, // '#'        
    { {       263}, {  29} }, // IF         
    { {       260}, {   5} }, // ID         
    { {       300}, {  30} }, // int        
    { {       301}, {  31} }, // real       
    { {       261}, {  32} }, // TRUE       
    { {       262}, {  33} }, // FALSE      
    { {       258}, {  34} }, // INT        
    { {       259}, {  35} }, // REAL       
    { {         0}, {   0} },               
};

SR__ s_98[] =
{
    { { REQ_TOKEN}, {  20} },             
    { {        41}, { 111} }, // ')'      
    { {        44}, { 112} }, // ','      
    { {       268}, {  38} }, // LOGIC_OR 
    { {       269}, {  39} }, // LOGIC_AND
    { {       270}, {  40} }, // EQ       
    { {       271}, {  41} }, // NEQ      
    { {       272}, {  42} }, // LESS     
    { {       274}, {  43} }, // LESS_EQ  
    { {       273}, {  44} }, // MORE     
    { {       275}, {  45} }, // MORE_EQ  
    { {        43}, {  46} }, // '+'      
    { {        45}, {  47} }, // '-'      
    { {        42}, {  48} }, // '*'      
    { {        47}, {  49} }, // '/'      
    { {        58}, {  50} }, // ':'      
    { {        37}, {  51} }, // '%'      
    { {        94}, {  52} }, // '^'      
    { {        91}, {  53} }, // '['      
    { {        40}, {  54} }, // '('      
    { {         0}, {   0} },             
};

SR__ s_99[] =
{
    { { REQ_TOKEN}, {  23} },               
    { {       286}, { 113} }, // expr       
    { {       290}, {  16} }, // array_func 
    { {       291}, {  17} }, // array_apply
    { {       277}, {  18} }, // LOGIC_NOT  
    { {        45}, {  19} }, // '-'        
    { {        40}, {  20} }, // '('        
    { {       292}, {  21} }, // call       
    { {       293}, {  22} }, // hash       
    { {       294}, {  23} }, // if_expr    
    { {       283}, {  24} }, // id         
    { {       295}, {  25} }, // number     
    { {       296}, {  26} }, // boolean    
    { {        92}, {  27} }, // '\'        
    { {        35}, {  28} }, // '#'        
    { {       263}, {  29} }, // IF         
    { {       260}, {   5} }, // ID         
    { {       300}, {  30} }, // int        
    { {       301}, {  31} }, // real       
    { {       261}, {  32} }, // TRUE       
    { {       262}, {  33} }, // FALSE      
    { {       258}, {  34} }, // INT        
    { {       259}, {  35} }, // REAL       
    { {         0}, {   0} },               
};

SR__ s_100[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_101[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ s_102[] =
{
    { { REQ_TOKEN}, {  23} },               
    { {       286}, { 114} }, // expr       
    { {       290}, {  16} }, // array_func 
    { {       291}, {  17} }, // array_apply
    { {       277}, {  18} }, // LOGIC_NOT  
    { {        45}, {  19} }, // '-'        
    { {        40}, {  20} }, // '('        
    { {       292}, {  21} }, // call       
    { {       293}, {  22} }, // hash       
    { {       294}, {  23} }, // if_expr    
    { {       283}, {  24} }, // id         
    { {       295}, {  25} }, // number     
    { {       296}, {  26} }, // boolean    
    { {        92}, {  27} }, // '\'        
    { {        35}, {  28} }, // '#'        
    { {       263}, {  29} }, // IF         
    { {       260}, {   5} }, // ID         
    { {       300}, {  30} }, // int        
    { {       301}, {  31} }, // real       
    { {       261}, {  32} }, // TRUE       
    { {       262}, {  33} }, // FALSE      
    { {       258}, {  34} }, // INT        
    { {       259}, {  35} }, // REAL       
    { {         0}, {   0} },               
};

SR__ s_103[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR__ s_104[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_105[] =
{
    { { REQ_DEF}, {  20} },                      
    { {     281}, { 115} }, // optional_semicolon
    { {     268}, {  38} }, // LOGIC_OR          
    { {     269}, {  39} }, // LOGIC_AND         
    { {     270}, {  40} }, // EQ                
    { {     271}, {  41} }, // NEQ               
    { {     272}, {  42} }, // LESS              
    { {     274}, {  43} }, // LESS_EQ           
    { {     273}, {  44} }, // MORE              
    { {     275}, {  45} }, // MORE_EQ           
    { {      43}, {  46} }, // '+'               
    { {      45}, {  47} }, // '-'               
    { {      42}, {  48} }, // '*'               
    { {      47}, {  49} }, // '/'               
    { {      58}, {  50} }, // ':'               
    { {      37}, {  51} }, // '%'               
    { {      94}, {  52} }, // '^'               
    { {      91}, {  53} }, // '['               
    { {      40}, {  54} }, // '('               
    { {      59}, {  90} }, // ';'               
    { {       0}, { -67} },                      
};

SR__ s_106[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_107[] =
{
    { { REQ_DEF}, {   3} },                      
    { {     281}, { 116} }, // optional_semicolon
    { {      59}, {   7} }, // ';'               
    { {       0}, { -67} },                      
};

SR__ s_108[] =
{
    { { REQ_DEF}, {  18} },             
    { {     268}, {  38} }, // LOGIC_OR 
    { {     269}, {  39} }, // LOGIC_AND
    { {     270}, {  40} }, // EQ       
    { {     271}, {  41} }, // NEQ      
    { {     272}, {  42} }, // LESS     
    { {     274}, {  43} }, // LESS_EQ  
    { {     273}, {  44} }, // MORE     
    { {     275}, {  45} }, // MORE_EQ  
    { {      43}, {  46} }, // '+'      
    { {      45}, {  47} }, // '-'      
    { {      42}, {  48} }, // '*'      
    { {      47}, {  49} }, // '/'      
    { {      58}, {  50} }, // ':'      
    { {      37}, {  51} }, // '%'      
    { {      94}, {  52} }, // '^'      
    { {      91}, {  53} }, // '['      
    { {      40}, {  54} }, // '('      
    { {       0}, { -48} },             
};

SR__ s_109[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR__ s_110[] =
{
    { { REQ_DEF}, {  18} },             
    { {     268}, {  38} }, // LOGIC_OR 
    { {     269}, {  39} }, // LOGIC_AND
    { {     270}, {  40} }, // EQ       
    { {     271}, {  41} }, // NEQ      
    { {     272}, {  42} }, // LESS     
    { {     274}, {  43} }, // LESS_EQ  
    { {     273}, {  44} }, // MORE     
    { {     275}, {  45} }, // MORE_EQ  
    { {      43}, {  46} }, // '+'      
    { {      45}, {  47} }, // '-'      
    { {      42}, {  48} }, // '*'      
    { {      47}, {  49} }, // '/'      
    { {      58}, {  50} }, // ':'      
    { {      37}, {  51} }, // '%'      
    { {      94}, {  52} }, // '^'      
    { {      91}, {  53} }, // '['      
    { {      40}, {  54} }, // '('      
    { {       0}, { -52} },             
};

SR__ s_111[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_112[] =
{
    { { REQ_TOKEN}, {  23} },               
    { {       286}, { 117} }, // expr       
    { {       290}, {  16} }, // array_func 
    { {       291}, {  17} }, // array_apply
    { {       277}, {  18} }, // LOGIC_NOT  
    { {        45}, {  19} }, // '-'        
    { {        40}, {  20} }, // '('        
    { {       292}, {  21} }, // call       
    { {       293}, {  22} }, // hash       
    { {       294}, {  23} }, // if_expr    
    { {       283}, {  24} }, // id         
    { {       295}, {  25} }, // number     
    { {       296}, {  26} }, // boolean    
    { {        92}, {  27} }, // '\'        
    { {        35}, {  28} }, // '#'        
    { {       263}, {  29} }, // IF         
    { {       260}, {   5} }, // ID         
    { {       300}, {  30} }, // int        
    { {       301}, {  31} }, // real       
    { {       261}, {  32} }, // TRUE       
    { {       262}, {  33} }, // FALSE      
    { {       258}, {  34} }, // INT        
    { {       259}, {  35} }, // REAL       
    { {         0}, {   0} },               
};

SR__ s_113[] =
{
    { { REQ_TOKEN}, {  19} },             
    { {       265}, { 118} }, // ELSE     
    { {       268}, {  38} }, // LOGIC_OR 
    { {       269}, {  39} }, // LOGIC_AND
    { {       270}, {  40} }, // EQ       
    { {       271}, {  41} }, // NEQ      
    { {       272}, {  42} }, // LESS     
    { {       274}, {  43} }, // LESS_EQ  
    { {       273}, {  44} }, // MORE     
    { {       275}, {  45} }, // MORE_EQ  
    { {        43}, {  46} }, // '+'      
    { {        45}, {  47} }, // '-'      
    { {        42}, {  48} }, // '*'      
    { {        47}, {  49} }, // '/'      
    { {        58}, {  50} }, // ':'      
    { {        37}, {  51} }, // '%'      
    { {        94}, {  52} }, // '^'      
    { {        91}, {  53} }, // '['      
    { {        40}, {  54} }, // '('      
    { {         0}, {   0} },             
};

SR__ s_114[] =
{
    { { REQ_DEF}, {  18} },             
    { {     268}, {  38} }, // LOGIC_OR 
    { {     269}, {  39} }, // LOGIC_AND
    { {     270}, {  40} }, // EQ       
    { {     271}, {  41} }, // NEQ      
    { {     272}, {  42} }, // LESS     
    { {     274}, {  43} }, // LESS_EQ  
    { {     273}, {  44} }, // MORE     
    { {     275}, {  45} }, // MORE_EQ  
    { {      43}, {  46} }, // '+'      
    { {      45}, {  47} }, // '-'      
    { {      42}, {  48} }, // '*'      
    { {      47}, {  49} }, // '/'      
    { {      58}, {  50} }, // ':'      
    { {      37}, {  51} }, // '%'      
    { {      94}, {  52} }, // '^'      
    { {      91}, {  53} }, // '['      
    { {      40}, {  54} }, // '('      
    { {       0}, { -59} },             
};

SR__ s_115[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       125}, { 119} }, // '}'
    { {         0}, {   0} },       
};

SR__ s_116[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       125}, { 120} }, // '}'
    { {         0}, {   0} },       
};

SR__ s_117[] =
{
    { { REQ_TOKEN}, {  19} },             
    { {        41}, { 121} }, // ')'      
    { {       268}, {  38} }, // LOGIC_OR 
    { {       269}, {  39} }, // LOGIC_AND
    { {       270}, {  40} }, // EQ       
    { {       271}, {  41} }, // NEQ      
    { {       272}, {  42} }, // LESS     
    { {       274}, {  43} }, // LESS_EQ  
    { {       273}, {  44} }, // MORE     
    { {       275}, {  45} }, // MORE_EQ  
    { {        43}, {  46} }, // '+'      
    { {        45}, {  47} }, // '-'      
    { {        42}, {  48} }, // '*'      
    { {        47}, {  49} }, // '/'      
    { {        58}, {  50} }, // ':'      
    { {        37}, {  51} }, // '%'      
    { {        94}, {  52} }, // '^'      
    { {        91}, {  53} }, // '['      
    { {        40}, {  54} }, // '('      
    { {         0}, {   0} },             
};

SR__ s_118[] =
{
    { { REQ_TOKEN}, {  23} },               
    { {       286}, { 122} }, // expr       
    { {       290}, {  16} }, // array_func 
    { {       291}, {  17} }, // array_apply
    { {       277}, {  18} }, // LOGIC_NOT  
    { {        45}, {  19} }, // '-'        
    { {        40}, {  20} }, // '('        
    { {       292}, {  21} }, // call       
    { {       293}, {  22} }, // hash       
    { {       294}, {  23} }, // if_expr    
    { {       283}, {  24} }, // id         
    { {       295}, {  25} }, // number     
    { {       296}, {  26} }, // boolean    
    { {        92}, {  27} }, // '\'        
    { {        35}, {  28} }, // '#'        
    { {       263}, {  29} }, // IF         
    { {       260}, {   5} }, // ID         
    { {       300}, {  30} }, // int        
    { {       301}, {  31} }, // real       
    { {       261}, {  32} }, // TRUE       
    { {       262}, {  33} }, // FALSE      
    { {       258}, {  34} }, // INT        
    { {       259}, {  35} }, // REAL       
    { {         0}, {   0} },               
};

SR__ s_119[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_120[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_121[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -46} }, 
};

SR__ s_122[] =
{
    { { REQ_DEF}, {  18} },             
    { {     268}, {  38} }, // LOGIC_OR 
    { {     269}, {  39} }, // LOGIC_AND
    { {     270}, {  40} }, // EQ       
    { {     271}, {  41} }, // NEQ      
    { {     272}, {  42} }, // LESS     
    { {     274}, {  43} }, // LESS_EQ  
    { {     273}, {  44} }, // MORE     
    { {     275}, {  45} }, // MORE_EQ  
    { {      43}, {  46} }, // '+'      
    { {      45}, {  47} }, // '-'      
    { {      42}, {  48} }, // '*'      
    { {      47}, {  49} }, // '/'      
    { {      58}, {  50} }, // ':'      
    { {      37}, {  51} }, // '%'      
    { {      94}, {  52} }, // '^'      
    { {      91}, {  53} }, // '['      
    { {      40}, {  54} }, // '('      
    { {       0}, { -60} },             
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,
};

typedef std::unordered_map<int, char const *> SMap;
typedef SMap::value_type SMapVal;

SMapVal s_symArr[] =
{
    SMapVal(-2, "_UNDETERMINED_"),  // predefined symbols
    SMapVal(-1, "_EOF_"),
    SMapVal(256, "_error_"),

    SMapVal(257, "SCANNER_ERROR"),
    SMapVal(258, "INT"),
    SMapVal(259, "REAL"),
    SMapVal(260, "ID"),
    SMapVal(261, "TRUE"),
    SMapVal(262, "FALSE"),
    SMapVal(263, "IF"),
    SMapVal(264, "THEN"),
    SMapVal(265, "ELSE"),
    SMapVal(266, "LET"),
    SMapVal(267, "RIGHT_ARROW"),
    SMapVal(268, "LOGIC_OR"),
    SMapVal(269, "LOGIC_AND"),
    SMapVal(270, "EQ"),
    SMapVal(271, "NEQ"),
    SMapVal(272, "LESS"),
    SMapVal(273, "MORE"),
    SMapVal(274, "LESS_EQ"),
    SMapVal(275, "MORE_EQ"),
    SMapVal(276, "DOTDOT"),
    SMapVal(277, "LOGIC_NOT"),
    SMapVal(278, "UMINUS"),
    SMapVal(279, "program"),
    SMapVal(280, "stmt_list"),
    SMapVal(281, "optional_semicolon"),
    SMapVal(282, "stmt"),
    SMapVal(283, "id"),
    SMapVal(284, "param_list"),
    SMapVal(285, "expr_block"),
    SMapVal(286, "expr"),
    SMapVal(287, "let_block_list"),
    SMapVal(288, "let_block"),
    SMapVal(289, "let"),
    SMapVal(290, "array_func"),
    SMapVal(291, "array_apply"),
    SMapVal(292, "call"),
    SMapVal(293, "hash"),
    SMapVal(294, "if_expr"),
    SMapVal(295, "number"),
    SMapVal(296, "boolean"),
    SMapVal(297, "expr_list"),
    SMapVal(298, "array_arg_list"),
    SMapVal(299, "array_arg"),
    SMapVal(300, "int"),
    SMapVal(301, "real"),
    SMapVal(302, "int_list"),
    SMapVal(303, "program_$"),
};

SMap s_symbol
(
    s_symArr, s_symArr + sizeof(s_symArr) / sizeof(SMapVal)
);

} // anonymous namespace ends


// $insert namespace-open
namespace stream
{

// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}

// $insert debugfunctions
std::string ParserBase::symbol__(int value) const
{
    using namespace std;
    ostringstream ostr;
    SMap::const_iterator it = s_symbol.find(value);
    if (it != s_symbol.end())
        ostr << "`" << it->second << "'";
    else if (isprint(value))
        ostr << "`" << static_cast<char>(value) << "' (" << value << ")";
    else
        ostr << "'\\x" << setfill('0') << hex << setw(2) << value << "'";
    return ostr.str();
}

void ParserBase::errorVerbose__()
{
    std::cout << "Parser State stack containing " << (d_stackIdx__ + 1) << " "
                                                                      "elements:\n"
                 "Each line shows a stack index followed by the value of that stack "
                                                                      "element\n";
    for (size_t idx = d_stackIdx__ + 1; idx--; )
       std::cout << std::setw(2) << idx << ": " << 
                    std::setw(3) << d_stateStack__[idx] << "\n";
}

void Parser::print__()
{
// $insert print

    enum { _UNDETERMINED_ = -2 };

    std::cout << "Token: " << symbol__(d_token__) <<
                ", text: `";
        if (d_token__ == _UNDETERMINED_)
            std::cout << "'\n";
        else
            std::cout << d_scanner.matched() << "'\n";
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 82 "parser.y"
        {
         d_val__ = d_vsp__[-1]; d_val__->type = ast::program;
         d_ast = d_val__;
         }
        break;

        case 2:
#line 88 "parser.y"
        {
         d_val__ = new ast::list_node(ast::program, 0);
         d_ast = d_val__;
         }
        break;

        case 3:
#line 96 "parser.y"
        {
         d_val__ = new ast::list_node( ast::statement_list, d_vsp__[0]->line, { d_vsp__[0] } );
         }
        break;

        case 4:
#line 101 "parser.y"
        {
         d_val__ = d_vsp__[-2];
         d_val__.as<ast::list_node>()->append( d_vsp__[0] );
         }
        break;

        case 5:
#line 109 "parser.y"
        {
         d_val__ = new ast::list_node( ast::statement, d_vsp__[-5]->line, {d_vsp__[-5], d_vsp__[-3], d_vsp__[0]} );
         }
        break;

        case 6:
#line 114 "parser.y"
        {
         d_val__ = new ast::list_node( ast::statement, d_vsp__[-2]->line, {d_vsp__[-2], nullptr, d_vsp__[0]} );
         }
        break;

        case 7:
#line 121 "parser.y"
        { d_val__ = new ast::list_node( ast::id_list, d_scanner.lineNr() ); }
        break;

        case 8:
#line 124 "parser.y"
        { d_val__ = new ast::list_node( ast::id_list, d_scanner.lineNr(), {d_vsp__[0]} ); }
        break;

        case 9:
#line 127 "parser.y"
        {
         d_val__ = d_vsp__[-2];
         d_val__.as<ast::list_node>()->append( d_vsp__[0] );
         }
        break;

        case 10:
#line 135 "parser.y"
        {
         d_val__ = new ast::list_node( ast::expression_block, d_vsp__[0]->line, {nullptr, d_vsp__[0]} );
         }
        break;

        case 11:
#line 140 "parser.y"
        {
         d_val__ = new ast::list_node( ast::expression_block, d_vsp__[-2]->line, {nullptr, d_vsp__[-2]} );
         }
        break;

        case 12:
#line 145 "parser.y"
        {
         d_val__ = new ast::list_node( ast::expression_block, d_vsp__[-4]->line, {d_vsp__[-4], d_vsp__[-2]} );
         }
        break;

        case 14:
#line 154 "parser.y"
        {
         d_val__ = d_vsp__[-2];
         d_val__.as<ast::list_node>()->append( d_vsp__[0].as<ast::list_node>()->elements );
         }
        break;

        case 15:
#line 162 "parser.y"
        {
         d_val__ = new ast::list_node( ast::statement_list, d_vsp__[-1]->line, {d_vsp__[0]} );
         }
        break;

        case 16:
#line 167 "parser.y"
        {
         d_val__ = d_vsp__[-2];
         d_val__->line = d_vsp__[-4]->line;
         }
        break;

        case 17:
#line 173 "parser.y"
        { d_val__ = new ast::node( ast::kwd_let, d_scanner.lineNr() ); }
        break;

        case 20:
#line 182 "parser.y"
        { d_val__ = new ast::list_node( ast::oppose, d_vsp__[0]->line, {d_vsp__[0]} ); }
        break;

        case 21:
#line 185 "parser.y"
        { d_val__ = new ast::binary_op_expression( d_vsp__[-2], ast::logic_or, d_vsp__[0] ); }
        break;

        case 22:
#line 188 "parser.y"
        { d_val__ = new ast::binary_op_expression( d_vsp__[-2], ast::logic_and, d_vsp__[0] ); }
        break;

        case 23:
#line 191 "parser.y"
        { d_val__ = new ast::binary_op_expression( d_vsp__[-2], ast::equal, d_vsp__[0] ); }
        break;

        case 24:
#line 194 "parser.y"
        { d_val__ = new ast::binary_op_expression( d_vsp__[-2], ast::not_equal, d_vsp__[0] ); }
        break;

        case 25:
#line 197 "parser.y"
        { d_val__ = new ast::binary_op_expression( d_vsp__[-2], ast::lesser, d_vsp__[0] ); }
        break;

        case 26:
#line 200 "parser.y"
        { d_val__ = new ast::binary_op_expression( d_vsp__[-2], ast::lesser_or_equal, d_vsp__[0] ); }
        break;

        case 27:
#line 203 "parser.y"
        { d_val__ = new ast::binary_op_expression( d_vsp__[-2], ast::greater, d_vsp__[0] ); }
        break;

        case 28:
#line 206 "parser.y"
        { d_val__ = new ast::binary_op_expression( d_vsp__[-2], ast::greater_or_equal, d_vsp__[0] ); }
        break;

        case 29:
#line 209 "parser.y"
        { d_val__ = new ast::binary_op_expression( d_vsp__[-2], ast::add, d_vsp__[0] ); }
        break;

        case 30:
#line 212 "parser.y"
        { d_val__ = new ast::binary_op_expression( d_vsp__[-2], ast::subtract, d_vsp__[0] ); }
        break;

        case 31:
#line 215 "parser.y"
        { d_val__ = new ast::list_node( ast::negate, d_vsp__[0]->line, {d_vsp__[0]} ); }
        break;

        case 32:
#line 218 "parser.y"
        { d_val__ = new ast::binary_op_expression( d_vsp__[-2], ast::multiply, d_vsp__[0] ); }
        break;

        case 33:
#line 221 "parser.y"
        { d_val__ = new ast::binary_op_expression( d_vsp__[-2], ast::divide, d_vsp__[0] ); }
        break;

        case 34:
#line 224 "parser.y"
        { d_val__ = new ast::binary_op_expression( d_vsp__[-2], ast::divide_integer, d_vsp__[0] ); }
        break;

        case 35:
#line 227 "parser.y"
        { d_val__ = new ast::binary_op_expression( d_vsp__[-2], ast::modulo, d_vsp__[0] ); }
        break;

        case 36:
#line 230 "parser.y"
        { d_val__ = new ast::binary_op_expression( d_vsp__[-2], ast::raise, d_vsp__[0] ); }
        break;

        case 37:
#line 233 "parser.y"
        { d_val__ = d_vsp__[-1]; }
        break;

        case 44:
#line 250 "parser.y"
        { d_val__ = new ast::list_node( ast::hash_expression, d_vsp__[0]->line, {d_vsp__[0], nullptr} ); }
        break;

        case 45:
#line 253 "parser.y"
        { d_val__ = new ast::list_node( ast::hash_expression, d_vsp__[-1]->line, {d_vsp__[-1], nullptr} ); }
        break;

        case 46:
#line 256 "parser.y"
        { d_val__ = new ast::list_node( ast::hash_expression, d_vsp__[-3]->line, {d_vsp__[-3], d_vsp__[-1]} ); }
        break;

        case 47:
#line 261 "parser.y"
        { d_val__ = new ast::list_node( ast::array_application, d_vsp__[-3]->line, {d_vsp__[-3], d_vsp__[-1]} ); }
        break;

        case 48:
#line 266 "parser.y"
        { d_val__ = new ast::list_node( ast::array_function, d_vsp__[-2]->line, {d_vsp__[-2], d_vsp__[0]} ); }
        break;

        case 49:
#line 271 "parser.y"
        { d_val__ = new ast::list_node( ast::anonymous, d_vsp__[0]->line, {d_vsp__[0]} ); }
        break;

        case 50:
#line 274 "parser.y"
        {
         d_val__ = d_vsp__[-2];
         d_val__.as<ast::list_node>()->append( d_vsp__[0] );
         }
        break;

        case 51:
#line 282 "parser.y"
        { d_val__ = new ast::list_node( ast::anonymous, d_vsp__[0]->line, {d_vsp__[0], nullptr} ); }
        break;

        case 52:
#line 285 "parser.y"
        { d_val__ = new ast::list_node( ast::anonymous, d_vsp__[-2]->line, {d_vsp__[-2], d_vsp__[0]} ); }
        break;

        case 55:
#line 297 "parser.y"
        {
         d_val__ = new ast::list_node( ast::call_expression, d_vsp__[-3]->line, {d_vsp__[-3], d_vsp__[-1]} );
         }
        break;

        case 56:
#line 304 "parser.y"
        { d_val__ = new ast::list_node( ast::int_list, d_vsp__[0]->line, {d_vsp__[0]} ); }
        break;

        case 57:
#line 307 "parser.y"
        {
         d_val__ = d_vsp__[-2];
         d_val__.as<ast::list_node>()->append( d_vsp__[0] );
         }
        break;

        case 58:
#line 315 "parser.y"
        { d_val__ = new ast::list_node( ast::expression_list, d_vsp__[0]->line, {d_vsp__[0]} ); }
        break;

        case 59:
#line 318 "parser.y"
        {
         d_val__ = d_vsp__[-2];
         d_val__.as<ast::list_node>()->append( d_vsp__[0] );
         }
        break;

        case 60:
#line 326 "parser.y"
        {
         d_val__ = new ast::list_node( ast::if_expression, d_vsp__[-4]->line, {d_vsp__[-4], d_vsp__[-2],d_vsp__[0]} );
         }
        break;

        case 61:
#line 333 "parser.y"
        {
         d_val__ = new ast::leaf_node<int>(
         ast::integer_num,
         d_scanner.lineNr(),
         std::stoi( d_scanner.matched() )
         );
        }
        break;

        case 62:
#line 343 "parser.y"
        {
         d_val__ = new ast::leaf_node<double>(
         ast::real_num,
         d_scanner.lineNr(),
         std::stod( d_scanner.matched() )
         );
        }
        break;

        case 63:
#line 354 "parser.y"
        { d_val__ = new ast::leaf_node<bool>( ast::boolean, d_scanner.lineNr(), true ); }
        break;

        case 64:
#line 356 "parser.y"
        { d_val__ = new ast::leaf_node<bool>( ast::boolean, d_scanner.lineNr(), false ); }
        break;

        case 65:
#line 360 "parser.y"
        {
         d_val__ = new ast::leaf_node<string>( ast::identifier, d_scanner.lineNr(), d_scanner.matched() );
        }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
    // $insert threading
    SR__ *sr = s_state[d_state__];        // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;        // sentinel-index in the SR__ array

    SR__ *lastElementPtr = sr + lastIdx;
    SR__ *elementPtr = sr + 1;            // start the search at s_xx[1]

    lastElementPtr->d_token = d_token__;// set search-token

    while (elementPtr->d_token != d_token__)
        ++elementPtr;

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

        // $insert errorverbose
        errorVerbose__();
    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}


// $insert namespace-close
}


